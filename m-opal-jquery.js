/* Generated by Opal 0.9.0.beta1 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars, $klass = Opal.klass;

  Opal.add_stubs(['$!', '$js?', '$include', '$extend', '$opal?', '$==', '$class', '$jquery', '$proxy_method', '$new']);
  $gvars.jquery = $;
  Opal.defn(Opal.Object, '$jquery', function(selector) {
    var self = this;

    return $(selector);
  });
  Opal.defn(Opal.Object, '$js?', function(value) {
    var self = this;

    return value == null || !value.$$class;
  });
  Opal.defn(Opal.Object, '$opal?', function(value) {
    var self = this;

    return self['$js?'](value)['$!']();
  });
  (function($base, $super) {
    function $JQ(){};
    var self = $JQ = $klass($base, $super, 'JQ', $JQ);

    var def = self.$$proto, $scope = self.$$scope;

    self.$include($scope.get('JavascriptProxy'));

    self.$extend((($scope.get('JavascriptProxy')).$$scope.get('Helpers')));

    Opal.defn(self, '$initialize', function(selector) {
      var $a, $b, self = this;

      if ((($a = ($b = self['$opal?'](selector), $b !== false && $b !== nil ?selector.$class()['$==']($scope.get('String')) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        selector = self.$jquery(selector)
      } else if ((($a = selector instanceof $) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        selector = self.$jquery(selector)
      };
      return self.j = selector;
    });

    self.$proxy_method("html");

    self.$proxy_method("html=", "html");

    self.$proxy_method("val");

    self.$proxy_method("val=", "val");

    self.$proxy_method("attr");

    self.$proxy_method("on");

    self.$proxy_method("ready");

    return (Opal.defs(self, '$now', function() {
      var self = this;

      return $.now();
    }), nil) && 'now';
  })($scope.base, null);
  return (Opal.defn(Opal.Object, '$JQ', function(element) {
    var self = this;

    return $scope.get('JQ').$new(element);
  }), nil) && 'JQ';
})(Opal);
