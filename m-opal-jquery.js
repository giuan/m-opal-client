/* Generated by Opal 0.9.0.beta2 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$!', '$js?', '$opal?', '$==', '$class', '$jquery', '$JQ', '$proxy_method', '$new', '$proxy_attr_reader']);
  self.$require("opal");
  Opal.defn(Opal.Object, '$js?', function(value) {
    var self = this;

    return value == null || !value.$$class;
  });
  Opal.defn(Opal.Object, '$opal?', function(value) {
    var self = this;

    return self['$js?'](value)['$!']();
  });
  (function($base, $super) {
    function $JQ(){};
    var self = $JQ = $klass($base, $super, 'JQ', $JQ);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def.j = nil;
    (Opal.cvars['@@jquery'] = $);

    Opal.defn(self, '$initialize', TMP_1 = function(selector) {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

      TMP_1.$$p = null;
      if ((($a = ($b = self['$opal?'](selector), $b !== false && $b !== nil ?selector.$class()['$==']($scope.get('String')) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        selector = $scope.get('JQ').$jquery(selector)
      } else if ((($a = selector instanceof $) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        selector = $scope.get('JQ').$jquery(selector)
      };
      return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [selector]);
    });

    Opal.defn(self, '$find', function(selector) {
      var self = this;

      return self.$JQ(self.j.find(selector));
    });

    self.$proxy_method("html");

    self.$proxy_method("html=", "html");

    self.$proxy_method("val");

    self.$proxy_method("val=", "val");

    self.$proxy_method("attr");

    self.$proxy_method("css");

    self.$proxy_method("on");

    self.$proxy_method("ready");

    self.$proxy_method("each");

    Opal.defs(self, '$unbox', function() {
      var self = this;

      return $;
    });

    Opal.defs(self, '$jquery', function(selector) {
      var self = this;

      return $(selector);
    });

    Opal.defs(self, '$ajax', function(url, settings) {
      var self = this;

      if (settings == null) {
        settings = nil
      }
      return $scope.get('JqXHR').$new($.ajax(url,settings));
    });

    Opal.defs(self, '$get', function(url, data, success, datatype) {
      var self = this;

      if (data == null) {
        data = nil
      }
      if (success == null) {
        success = nil
      }
      if (datatype == null) {
        datatype = nil
      }
      return $scope.get('JqXHR').$new(($).get(url, data, success, datatype));
    });

    Opal.defs(self, '$getJSON', function(url, data, success) {
      var $a, self = this;

      if (data == null) {
        data = nil
      }
      if (success == null) {
        success = nil
      }
      return $scope.get('JqXHR').$new((($a = Opal.cvars['@@jquery']) == null ? nil : $a).getJSON(url, data, success));
    });

    Opal.defs(self, '$getScript', function(url, success) {
      var $a, self = this;

      if (success == null) {
        success = nil
      }
      return $scope.get('JqXHR').$new((($a = Opal.cvars['@@jquery']) == null ? nil : $a).getScript(url, success));
    });

    Opal.defs(self, '$post', function(url, data, success, datatype) {
      var $a, self = this;

      if (data == null) {
        data = nil
      }
      if (success == null) {
        success = nil
      }
      if (datatype == null) {
        datatype = nil
      }
      return $scope.get('JqXHR').$new((($a = Opal.cvars['@@jquery']) == null ? nil : $a).post(url, data, success, datatype));
    });

    return (Opal.defs(self, '$now', function() {
      var self = this;

      return $.now();
    }), nil) && 'now';
  })($scope.base, $scope.get('RBox'));
  Opal.defn(Opal.Object, '$JQ', function(selector) {
    var self = this;

    return $scope.get('JQ').$new(selector);
  });
  (function($base, $super) {
    function $JqXHR(){};
    var self = $JqXHR = $klass($base, $super, 'JqXHR', $JqXHR);

    var def = self.$$proto, $scope = self.$$scope;

    self.$proxy_method("done");

    self.$proxy_method("fail");

    return self.$proxy_method("always");
  })($scope.base, $scope.get('RBox'));
  return (function($base, $super) {
    function $Event(){};
    var self = $Event = $klass($base, $super, 'Event', $Event);

    var def = self.$$proto, $scope = self.$$scope;

    self.$proxy_attr_reader("meta_key", "metaKey");

    self.$proxy_attr_reader("page_x", "pageX");

    self.$proxy_attr_reader("page_y", "pageY");

    self.$proxy_method("prevent_default", "preventDefault");

    self.$proxy_method("stop_propagation", "stopPropagation");

    self.$proxy_attr_reader("target");

    return self.$proxy_attr_reader("which");
  })($scope.base, $scope.get('RBox'));
})(Opal);
