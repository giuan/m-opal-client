/* Generated by Opal 0.9.0.beta1 */
Opal.modules["js"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$<<', '$global', '$extend']);
  return (function($base) {
    var self = $module($base, 'JS');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defn(self, '$delete', function(object, property) {
      var self = this;

      return delete object[property];
    });

    Opal.defn(self, '$global', function() {
      var self = this;

      return Opal.global;
    });

    Opal.defn(self, '$in', function(property, object) {
      var self = this;

      return property in object;
    });

    Opal.defn(self, '$instanceof', function(value, func) {
      var self = this;

      return value instanceof func;
    });

    Opal.defn(self, '$new', TMP_1 = function(func) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil, f = nil;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for(var arg_index = 0; arg_index < array_size; arg_index++) {
        args[arg_index] = arguments[arg_index + 1];
      }
      TMP_1.$$p = null;
      if (block !== false && block !== nil) {
        args['$<<'](block)};
      f = function(){return func.apply(this, args)};
      f["prototype"]=func["prototype"];
      return new f();
    });

    Opal.defn(self, '$typeof', function(value) {
      var self = this;

      return typeof value;
    });

    Opal.defn(self, '$void', function(expr) {
      var self = this;

      return void expr;
    });

    Opal.defn(self, '$call', TMP_2 = function(func) {
      var self = this, $iter = TMP_2.$$p, block = $iter || nil, g = nil;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for(var arg_index = 0; arg_index < array_size; arg_index++) {
        args[arg_index] = arguments[arg_index + 1];
      }
      TMP_2.$$p = null;
      g = self.$global();
      if (block !== false && block !== nil) {
        args['$<<'](block)};
      return g[func].apply(g, args);
    });

    Opal.alias(self, 'method_missing', 'call');

    self.$extend(self);
  })($scope.base)
};

/* Generated by Opal 0.9.0.beta1 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$attr_reader', '$define_method', '$private']);
  self.$require("js");
  (function($base) {
    var self = $module($base, 'JavascriptProxy');

    var def = self.$$proto, $scope = self.$$scope;

    self.$attr_reader("j")
  })($scope.base);
  return (function($base) {
    var self = $module($base, 'Helpers');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$proxy_method', function(new$, old) {
      var $a, $b, TMP_1, self = this;

      if (old == null) {
        old = nil
      }
      old = ((($a = old) !== false && $a !== nil) ? $a : new$);
      return ($a = ($b = self).$define_method, $a.$$p = (TMP_1 = function(args){var self = TMP_1.$$s || this, $a, m = nil;
        if (self.j == null) self.j = nil;
args = $slice.call(arguments, 0);
      m = self.j[old];
        return ($a = m).call.apply($a, [self.j].concat(Opal.to_a(args)));}, TMP_1.$$s = self, TMP_1), $a).call($b, new$);
    });

    self.$private("proxy_method");
  })($scope.get('JavascriptProxy'));
})(Opal);
