/* Generated by Opal 0.9.0 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$proxy_method', '$open', '$on']);
  self.$require("(file)"+ '/../' + "rbox");
  return (function($base, $super) {
    function $RXhr(){};
    var self = $RXhr = $klass($base, $super, 'RXhr', $RXhr);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    self.$proxy_method("open");

    self.$proxy_method("send");

    self.$proxy_method("on", "addEventListener");

    Opal.defn(self, '$initialize', TMP_1 = function() {
      var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

      TMP_1.$$p = null;
      return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [new XMLHttpRequest()]);
    });

    Opal.defn(self, '$get', function(url, params, handler) {
      var self = this;

      if (handler == null) {
        handler = nil
      }
      self.$open("GET", url);
      if (handler !== false && handler !== nil) {
        return self.$on("load", handler)
        } else {
        return nil
      };
    });

    Opal.defn(self, '$post', function(url, handler) {
      var self = this;

      if (handler == null) {
        handler = nil
      }
      self.$open("POST", url);
      if (handler !== false && handler !== nil) {
        return self.$on("load", handler)
        } else {
        return nil
      };
    });

    return (Opal.defn(self, '$_send', function(params) {
      var self = this;

      return nil;
    }), nil) && '_send';
  })($scope.base, $scope.get('RBox'));
})(Opal);
